akka {
  actor {
    provider = cluster

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo // switch the default serializer to kryo
    }
  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical.hostname = "localhost"
      canonical.port = 0
    }
  }

  cluster {
    sharding {
      remember-entities = on
      number-of-shards = 30
    }

    seed-nodes = [
      "akka://RTJVMCluster@localhost:2551",
      "akka://RTJVMCluster@localhost:2552"
    ]
  }
}

akka-kryo-serialization {
  type = "graph" // can serialize objects with shared or cyclic dependencies: alternative nograph, faster
  id-strategy = "incremental" // one of the fastest; alternative "explicit"
  post-serialization-transformations = "lz4" // "lz4,aes" compression with lz4 and encryption aes

  use-manifests = true // attach the class name to the serialization
  implicit-registration-logging = true // see how the standard classes/types are being registered

  mappings { // optional for id-strategy "incremental", mandatory for "explicit"
    "akka.actor.typed.internal.adapter.ActorRefAdapter" = 100
    "akka.actor.LocalActorRef" = 200
    "java.util.Date" = 300
    "akka.cluster.sharding.typed.ShardingEnvelope" = 400
    "learn_akka_cluster.ClusterShardingExample$OysterCard" = 500
    "learn_akka_cluster.ClusterShardingExample$EntryAttempt" = 600
    "learn_akka_cluster.ClusterShardingExample$EntryRejected" = 700
    "learn_akka_cluster.ClusterShardingExample$EntryAccepted$" = 800
  }

  classes = [
    "akka.actor.typed.internal.adapter.ActorRefAdapter",
    "akka.actor.LocalActorRef",
    "akka.cluster.sharding.typed.ShardingEnvelope",
    "learn_akka_cluster.ClusterShardingExample$OysterCard",
    "learn_akka_cluster.ClusterShardingExample$EntryAttempt",
    "learn_akka_cluster.ClusterShardingExample$EntryRejected"
  ]
}
