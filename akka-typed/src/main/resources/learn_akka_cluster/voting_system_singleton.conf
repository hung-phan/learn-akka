akka {
  actor {
    provider = cluster

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo // switch the default serializer to kryo
    }
  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical {
        hostname = "localhost"
      }
    }
  }

  cluster {
    log-info = off
    seed-nodes = [
      "akka://RTJVMCluster@localhost:2551",
      "akka://RTJVMCluster@localhost:2552"
    ]
  }
}

akka-kryo-serialization {
  type = "graph" // can serialize objects with shared or cyclic dependencies: alternative nograph, faster
  id-strategy = "incremental" // one of the fastest; alternative "explicit"
  post-serialization-transformations = "lz4" // "lz4,aes" compression with lz4 and encryption aes

  use-manifests = true // attach the class name to the serialization
  implicit-registration-logging = true // see how the standard classes/types are being registered

  mappings { // optional for id-strategy "incremental", mandatory for "explicit"
    "akka.actor.typed.internal.adapter.ActorRefAdapter" = 100
    "akka.actor.LocalActorRef" = 200

    "learn_akka_cluster.Vote" = 300
    "learn_akka_cluster.Vote$" = 301
    "learn_akka_cluster.VoteAccepted" = 400
    "learn_akka_cluster.VoteAccepted$" = 401
    "learn_akka_cluster.VoteRejected" = 500
    "learn_akka_cluster.VoteRejected$" = 501
    "learn_akka_cluster.Person" = 600,
    "learn_akka_cluster.Person$" = 601
  }

  classes = [
    "akka.actor.typed.internal.adapter.ActorRefAdapter",
    "akka.actor.LocalActorRef",

    "learn_akka_cluster.Vote",
    "learn_akka_cluster.VoteAccepted",
    "learn_akka_cluster.VoteRejected",
    "learn_akka_cluster.Person"
  ]
}
