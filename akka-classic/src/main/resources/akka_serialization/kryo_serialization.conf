akka {
  actor {
    provider = remote

    // switch off java serializer completely
    allow-java-serialization = off

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo // switch the default serializer to kryo
    }
  }

  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical.hostname = "localhost"
      canonical.port = 0
    }
  }
}

akka-kryo-serialization {
  type = "graph" // can serialize objects with shared or cyclic dependencies: alternative nograph, faster
  id-strategy = "incremental" // one of the fastest; alternative "explicit"
  post-serialization-transformations = "lz4" // "lz4,aes" compression with lz4 and encryption aes

  kryo-trace = true // for debugging
  use-manifests = true // attach the class name to the serialization
  implicit-registration-logging = true // see how the standard classes/types are being registered

  mappings { // optional for id-strategy "incremental", mandatory for "explicit"
    "learn_akka_serialization.Book" = 45
  }

  classes = [
    "learn_akka_serialization.Book"
  ]
}

postgresDemo {
  akka {
    loglevel = "INFO"
  }

  akka.persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"

        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          user = "user"
          password = "pass"
          url = "jdbc:postgresql://localhost:5432/docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}
