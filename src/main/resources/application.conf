akka {
  loglevel = "INFO"
}

mySpecialConfig {
  akka {
    loglevel = "DEBUG"
  }
}

specialTimeAssertionsConfig {
  akka.test.single-expect-default = 3s
}

# intercepting log message test
interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
  }
}

# routers demo
routerDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = [
          "/user/slave_1",
          "/user/slave_2",
          "/user/slave_3",
          "/user/slave_4",
          "/user/slave_5"

        ]
      }
    }
  }
}

my-dispatcher {
  type = Dispatcher # PinnedDispatcher, CallingThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 3
  }

  throughput = 30
}

# dispatchers demo
dispatchersDemo {
  akka.actor.deployment {
    /rtjvm {
      dispatcher = my-dispatcher
    }
  }
}

# mailboxed demo
mailboxesDemo {
  support-ticket-dispatcher {
    mailbox-type = "chapter1.Mailboxes$SupportTicketPriorityMailbox"
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka.actor.deployment {
    /alt-control-aware-actor {
      mailbox = control-mailbox
    }
  }
}

chapter2 {
  akka {
    loglevel = "INFO"
  }

  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/persistence-journal"

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/persistence-snapshots"
}

localStores {
  akka.persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb {
        dir = "target/localstores/journal"
        compaction-interval {
          simple-persistent-actor = 1000
          "*" = 5000
        }
      }
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = "target/localstores/snapshots"
    }
  }
}

postgresDemo {
  akka {
    loglevel = "INFO"
  }

  akka.persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"

        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          user = "user"
          password = "pass"
          url = "jdbc:postgresql://localhost:5432/docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka {
    loglevel = "INFO"
  }

  akka.persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }
}

customSerializerDemo {
  akka {
    loglevel = "INFO"

    persistence {
      journal.plugin = "cassandra-journal"
      snapshot-store.plugin = "cassandra-snapshot-store"
    }

    actor {
      serializers {
        java = "akka.serialization.JavaSerializer"
        rtjvm = "stores_serialization.UserRegistrationSerializer"
      }

      serialization-bindings {
        "stores_serialization.UserRegistered" = rtjvm
        // java serializer is used by default
      }
    }
  }
}

eventAdapters {
  akka {
    persistence {
      journal.plugin = "cassandra-journal"
      snapshot-store.plugin = "cassandra-snapshot-store"
    }
  }

  cassandra-journal {
    event-adapters {
      guitar-inventory-enhancer = "advance_persistence.EventAdapters$GuitarReadEventAdapter"
    }

    event-adatper-bindings {
      "advance_persistence.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}
