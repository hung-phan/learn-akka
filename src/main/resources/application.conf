akka {
  loglevel = "INFO"
}

mySpecialConfig {
  akka {
    loglevel = "DEBUG"
  }
}

specialTimeAssertionsConfig {
  akka.test.single-expect-default = 3s
}

# intercepting log message test
interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
  }
}

# routers demo
routerDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = [
          "/user/slave_1",
          "/user/slave_2",
          "/user/slave_3",
          "/user/slave_4",
          "/user/slave_5"

        ]
      }
    }
  }
}

my-dispatcher {
  type = Dispatcher # PinnedDispatcher, CallingThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 3
  }

  throughput = 30
}

# dispatchers demo
dispatchersDemo {
  akka.actor.deployment {
    /rtjvm {
      dispatcher = my-dispatcher
    }
  }
}

# mailboxed demo
mailboxesDemo {
  support-ticket-dispatcher {
    mailbox-type = "chapter1.Mailboxes$SupportTicketPriorityMailbox"
  }

 control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka.actor.deployment {
    /alt-control-aware-actor {
      mailbox = control-mailbox
    }
  }
}
